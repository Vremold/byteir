diff --git a/lib/Dialect/Torch/Transforms/RecomposeComplexOps.cpp b/lib/Dialect/Torch/Transforms/RecomposeComplexOps.cpp
index d35a8f56..e0ca7ad4 100644
--- a/lib/Dialect/Torch/Transforms/RecomposeComplexOps.cpp
+++ b/lib/Dialect/Torch/Transforms/RecomposeComplexOps.cpp
@@ -136,14 +136,20 @@ public:
     Value dim = unbind.getDim();
     Value input = unbind.getSelf();
     SmallVector<Value> slices;
+    auto step = rewriter.create<Torch::ConstantIntOp>(
+        op->getLoc(), rewriter.getI64IntegerAttr(1));
     for (int i = 0; i < op.getNumResults(); i++) {
       // rewrite to slice op
       auto resultTy = op.getResult(i).getType();
       auto index = rewriter.create<Torch::ConstantIntOp>(
           op->getLoc(), rewriter.getI64IntegerAttr(i));
-      auto newSelect = rewriter.create<AtenSelectIntOp>(op->getLoc(), resultTy,
-                                                        input, dim, index);
-      slices.push_back(newSelect);
+      auto end = rewriter.create<Torch::ConstantIntOp>(
+          op->getLoc(), rewriter.getI64IntegerAttr(i + 1));
+      auto newSlice = rewriter.create<AtenSliceTensorOp>(
+          op->getLoc(), resultTy, input, dim, index, end, step);
+      auto squeeze = rewriter.create<AtenSqueezeDimOp>(op->getLoc(), resultTy,
+                                                       newSlice, dim);
+      slices.push_back(squeeze);
     }
     rewriter.replaceOp(op, slices);
     if (unbind.getResult().use_empty())
